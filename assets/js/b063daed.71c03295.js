"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[250],{6433:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docsSidebar":[{"type":"link","label":"Introduction","href":"/ultimate-list/","docId":"intro","unlisted":false},{"type":"category","label":"Core Concepts","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Data Sources","href":"/ultimate-list/core-concepts/data-sources","docId":"core-concepts/data-sources","unlisted":false},{"type":"link","label":"Dimensions","href":"/ultimate-list/core-concepts/dimensions","docId":"core-concepts/dimensions","unlisted":false},{"type":"link","label":"Renderers","href":"/ultimate-list/core-concepts/renderers","docId":"core-concepts/renderers","unlisted":false}],"href":"/ultimate-list/core-concepts/intro"},{"type":"category","label":"Guides","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Styling","href":"/ultimate-list/guides/styling","docId":"guides/styling","unlisted":false},{"type":"link","label":"Supporting different items","href":"/ultimate-list/guides/supporting-different-items","docId":"guides/supporting-different-items","unlisted":false}]},{"type":"link","label":"API Reference","href":"/ultimate-list/api-reference","docId":"api-reference","unlisted":false}]},"docs":{"api-reference":{"id":"api-reference","title":"API Reference","description":"Components","sidebar":"docsSidebar"},"core-concepts/data-sources":{"id":"core-concepts/data-sources","title":"Data Sources","description":"A data source represents what data will be rendered in the list. For example, the data for a chat room would be the messages sent, as well as metadata such as who sent them.","sidebar":"docsSidebar"},"core-concepts/dimensions":{"id":"core-concepts/dimensions","title":"Dimensions","description":"Dimensions define how elements are sized and placed. You must know in advance the size of your elements.","sidebar":"docsSidebar"},"core-concepts/intro":{"id":"core-concepts/intro","title":"Core Concepts","description":"In the introduction, you saw an example of a simple UltimateList.","sidebar":"docsSidebar"},"core-concepts/renderers":{"id":"core-concepts/renderers","title":"Renderers","description":"Renderers define what an element looks like. UltimateList will create a frame with the size and position specified by your dimensions, and you fill it in.","sidebar":"docsSidebar"},"guides/styling":{"id":"guides/styling","title":"Styling","description":"UltimateList ScrollingFrames start out with default properties except for setting the size to 100% of the container. There are 3 ways to stylize a ScrollingFrame.","sidebar":"docsSidebar"},"guides/supporting-different-items":{"id":"guides/supporting-different-items","title":"Supporting different items","description":"Let\'s make a virtualized list that combines different kinds of items, in this case categories of continents, and a list of countries underneath.","sidebar":"docsSidebar"},"intro":{"id":"intro","title":"Introduction","description":"UltimateList is a library for creating fast and efficient virtualized lists in Roblox. A virtualized list is a scrolling frame that only creates elements for items that can actually be seen. This puts less work on the engine, defers running code in React components until they can be seen (as well as cleaning up when they\'re not), and in some cases can do this while also performing zero React re-renders as a user interacts with the list.","sidebar":"docsSidebar"}}}}')}}]);