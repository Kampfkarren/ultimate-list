"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[133],{5363:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"guides/styling","title":"Styling","description":"UltimateList ScrollingFrames start out with default properties except for setting the size to 100% of the container. There are 3 ways to stylize a ScrollingFrame.","source":"@site/docs/guides/styling.md","sourceDirName":"guides","slug":"/guides/styling","permalink":"/ultimate-list/guides/styling","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/guides/styling.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docsSidebar","previous":{"title":"Renderers","permalink":"/ultimate-list/core-concepts/renderers"},"next":{"title":"Supporting different items","permalink":"/ultimate-list/guides/supporting-different-items"}}');var i=n(4848),r=n(8453);const o={sidebar_position:1},l="Styling",a={},c=[{value:"Style the container",id:"style-the-container",level:2},{value:"Style sheets",id:"style-sheets",level:2},{value:"<code>native</code> property",id:"native-property",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"styling",children:"Styling"})}),"\n",(0,i.jsx)(t.p,{children:"UltimateList ScrollingFrames start out with default properties except for setting the size to 100% of the container. There are 3 ways to stylize a ScrollingFrame."}),"\n",(0,i.jsx)(t.h2,{id:"style-the-container",children:"Style the container"}),"\n",(0,i.jsx)(t.p,{children:"For things like size, you can style the container you put the ScrollingFrame into. For example, if you want a ScrollingFrame to be 300x300, you can do that like so:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-lua",children:'return e("Frame", {\n    Size = UDim2.fromOffset(300, 300),\n}, {\n    ScrollingFrame = e(UltimateList.Components.ScrollingFrame, {\n        -- etc\n    })\n})\n'})}),"\n",(0,i.jsx)(t.h2,{id:"style-sheets",children:"Style sheets"}),"\n",(0,i.jsxs)(t.p,{children:["ScrollingFrame comes with a ",(0,i.jsx)(t.code,{children:"tag"})," property that can be used alongside ",(0,i.jsx)(t.a,{href:"https://create.roblox.com/docs/ui/styling",children:"the Roblox UI styling system"})," to do things like remove the background, change the scroll bar, etc."]}),"\n",(0,i.jsxs)(t.h2,{id:"native-property",children:[(0,i.jsx)(t.code,{children:"native"})," property"]}),"\n",(0,i.jsxs)(t.p,{children:["When style sheets don't work, or when you need to hook onto events, you can use the ",(0,i.jsx)(t.code,{children:"native"})," property, which will forward everything to the ScrollingFrame:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-lua",children:"return e(UltimateList.Components.ScrollingFrame, {\n    native = {\n        BackgroundTransparency = 1,\n    },\n\n    -- etc\n})\n"})}),"\n",(0,i.jsx)(t.p,{children:"You cannot set the following keys, as UltimateList relies on them:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Size"})," - Always set to 100% of the container"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"CanvasSize"})," - Changes based on your ",(0,i.jsx)(t.a,{href:"../core-concepts/dimensions",children:"dimensions"})]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"React.Change.AbsoluteWindowSize"})," - Use ",(0,i.jsx)(t.code,{children:"onAbsoluteWindowSizeChanged: (Vector2) -> ()"})," prop instead."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"React.Change.CanvasPosition"})," - Use ",(0,i.jsx)(t.code,{children:"onScrollAxisChanged: (number) -> ()"})," prop instead, which gives you the position for the dominant axis (e.g. how far down if direction is Y)."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"There are some keys that will not error, but that you should use other ways of changing:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"React.Tag"})," - Use ",(0,i.jsx)(t.code,{children:"tag"})," prop instead."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"ref"})," - Use ",(0,i.jsx)(t.code,{children:"scrollingFrameRef"})," prop instead."]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>l});var s=n(6540);const i={},r=s.createContext(i);function o(e){const t=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);